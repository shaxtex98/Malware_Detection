# # supposed_data = [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
# # Malware_data = [1, 1, 0, 0]
# # counter = 0
# # print(len(supposed_data))
# # print(len(Malware_data))
# # for index in range(len(supposed_data)):
# #
# #     supposed_data[index]
# #     counter = 0
# #
# #     for j in range(len(Malware_data)):
# #
# #         i = index
# #         if supposed_data[index] == Malware_data[j]:
# #             counter+1
# #             print('Found', supposed_data[index])
# #         else:
# #             break
# # print(counter)
# #
#
#
# # Created by Ahmad Shah -- Date: 8th Nov, 2020
#
# # Importing random for random Builtin Function (For Generating Random Values)
# # import random
# #
# # # Defining Global Size Variable
# # N = 64  # N = 64
# #
# #
# # # Creating Random Array
# # def Randomize_array(array):
# #     for i in range(0, N):
# #         n = random.randint(1, 64)
# #         array.append(n)
# #
# #
# # # Creating Vector Array of Zeros
# # def Zerooos_Array(array1):
# #     for i in range(0, N):
# #         n = 0
# #         array1.append(n)
# #
# #
# # # Printing Arrays
# # def Printing_Array(array1):
# #     print("\nVector: ", str(array1))
# #
# #
# # # Function Definition of Convolution
# # def Sequential_Convolution(num1, msk, ans1):
# #     ans1 = 0
# #     mask_size = len(msk)
# #     print('mask size', mask_size)
# #     for i in range(0, len(num1)):
# #         temp = 0
# #         for j in range(0, len(msk)):
# #             if num1[i + j] == msk[j]:
# #                 # print('1st MATCHED')
# #                 print('num1', num1[i + j])
# #                 print('mask', msk[j])
# #                 temp += 1
# #             else:
# #                 break
# #
# #     if temp == mask_size:
# #         print('Temp,', temp)
# #         print('Ans1', ans1)
# #         ans1 += 1
# #
# #
# # # Variables
# # A = [2, 3, 4, 3, 2, 1, 3, 6, 7, 9, 4, 1, 1, 1]
# # M = [2, 3, 4, 3, 2]
# # ans = 0
# #
# # # Filling Vector A with Random Values and B with Zeros
# # # Randomize_array(A)
# #
# # # Printing Vector and Mask
# # print("Watermarking it as: Created by Ahmad Shah -- 8th Nov, 2020")
# # print("\nVector A after Filled with Random Values:")
# # Printing_Array(A)
# # print("\nMask Values:")
# # Printing_Array(M)
# #
# # # Convolution Function Call
# # Sequential_Convolution(A, M, ans)
# #
# # print('Got result', ans)
#
#
#
# # END ---- Problem Solved: 1-D Sequential Convolution
#
# def search(patt, num):
#     M = len(patt)
#     N = len(num)
#     print(M)
#     print(N)
#
#     # A loop to slide pat[] one by one */
#     for i in range(N - M + 1):
#         j = 0
#
#         # For current index i, check
#         # for pattern match */
#         while j < M:
#             if txt[i + j] != pat[j]:
#                 break
#             j += 1
#
#         if j == M:
#             print("Pattern found at index ", i)
#
#
# # Driver Code
# if __name__ == '__main__':
#     txt = "AABAACAABAABAAABAA"
#     pat = "AABA"
#     num = [1,2,2,1,1,1,1,1,1,1,1,1]
#     patt = [1,2,2,1]
#     # search(pat, txt)
#     search(num,patt)


import numpy as np
data = np.array([1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0])
malware_pattern = [0, 1, 1, 0]
N = len(searchval)
possibles = np.where(data == malware_pattern[0])[0]

print("File Data is: ", data)
print("Malware Data is:", malware_pattern)

times_found = []
for p in possibles:
    check = data[p:p+N]
    if np.all(check == malware_pattern):
        times_found.append(p)


# if len(solns) <= 1:
# print("The File is Safe")
# else:
print("Malware is Detected in this File data = Times = ", len(times_found))
print('Malware is Detected at Indexes: ', times_found)
