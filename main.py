from os import listdir
from PIL import Image
import os.path
import numpy as np
import glob
import tensorflow.keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D

path_new_benign = r'/home/shah/PycharmProjects/FYP-Part1/dataset/benign'
path_new_malware = r'/home/shah/PycharmProjects/FYP-Part1/dataset/malware'

h = 256 #height of image
w = 256 #width of image

#be careful with using this function, it will consume memory, access to disk and time for Benign
images = []
for f in listdir(path_new_benign):
  with open(os.path.join(path_new_benign, f), 'rb') as img_set:
      img_arr = img_set.read(h*w)
      while img_arr:
          if len(img_arr) == h*w and img_arr not in images:
              images.append(img_arr)
          img_arr = img_set.read(h*w)

#be careful with using this function, it will consume memory, access to disk and time for Malware
images2 = []
for f in listdir(path_new_malware):
  with open(os.path.join(path_new_malware, f), 'rb') as img_set2:
      img_arr2 = img_set2.read(h*w)
      while img_arr2:
          if len(img_arr2) == h*w and img_arr2 not in images2:
              images2.append(img_arr2)
          img_arr2 = img_set2.read(h*w)

#And you can save them into png files for Benign
count = 0
for img in images:
    png = Image.fromarray(np.reshape(list(img), (h,w)).astype('float32'), mode='L')
    png.save('images/benign/image_l%d.png'%count)
    count += 1

#And you can save them into png files for Malware
count2 = 0
for img2 in images2:
    png = Image.fromarray(np.reshape(list(img2), (h,w)).astype('float32'), mode='L')
    png.save('images/malware/image_l%d.png'%count)
    count += 1


# reshape images to fit into the CNN model for Benign
img_list = np.zeros(shape=(len(images), h, w, 1), dtype=np.uint8)
for j in range(len(images)):
    img_list[j, :, :, 0] = np.reshape(list(images[j]), (h, w))

img_list = img_list.astype('float32')
img_list /= 255

# reshape images2 to fit into the CNN model for Malware
img_list2 = np.zeros(shape=(len(images2), h, w, 1), dtype=np.uint8)
for j in range(len(images2)):
    img_list2[j, :, :, 0] = np.reshape(list(images2[j]), (h, w))

img_list2 = img_list2.astype('float32')
img_list2 /= 255



model = Sequential()
#Conv2D Layers
model.add(Conv2D(12, (25, 25), padding='same',input_shape=img_list.shape[1:], activation = 'relu'))
model.add(Conv2D(12, (25, 25), activation = 'relu'))
#Max Pooling Layer
model.add(MaxPooling2D(pool_size=(2, 2)))
#Conv2D Layer
model.add(Conv2D(12, (13, 13), padding='same', activation = 'relu'))
model.add(Conv2D(12, (13, 13), activation = 'relu'))
#Max Pooling
model.add(MaxPooling2D(pool_size=(2, 2)))
#Flattening Layer
model.add(Flatten())
#Dense Layer
model.add(Dense(1024, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['binary_accuracy'])
model.summary()



#
#
#Change the parameters to whatever suits you
benign_images = r'images/benign'
malicious_images = r'images/malware'


batch_size = 5
epochs = 100
labels = [0 for _ in benign_images] + [1 for _ in malicious_images]
model.fit(benign_images + malicious_images, labels, batch_size = batch_size, epochs = epochs,
              validation_split = 0.25,
              shuffle = True)